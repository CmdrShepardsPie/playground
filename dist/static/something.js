"use strict";
const thing = document.querySelector("#thing");
const text = document.querySelector("#text");
const fps = 30;
const fpsMs = 1000 / fps;
const maxValue = 100;
const seconds = 300;
const incrementPerFrame = maxValue / fps / seconds;
console.log("fps", fps, "fps_ms", fpsMs, "seconds", seconds, "incrementPerFrame", incrementPerFrame);
let last = 0;
let currentTime = 0;
const int = setInterval(() => {
    currentTime += incrementPerFrame;
    if (Math.round(Math.random() * (seconds / 10)) === 0) {
        doAnimation();
    }
    if (Math.round(currentTime) >= maxValue) {
        clearInterval(int);
        last = maxValue;
        doAnimation();
        console.log("done");
    }
}, fpsMs);
function doAnimation() {
    if (thing && text) {
        const stuff = Math.min((Math.random() * (currentTime - last)) + last, 100);
        last = stuff;
        thing.style.width = `${Math.round(last) * 10}px`;
        text.innerText = `${Math.round(last)}%`;
        // console.log('currentTime', currentTime);
        // console.log('last', last);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29tZXRoaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3N0YXRpYy9zb21ldGhpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQWlCLFFBQVEsQ0FBQyxDQUFDO0FBQy9ELE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQWlCLE9BQU8sQ0FBQyxDQUFDO0FBQzdELE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztBQUNmLE1BQU0sS0FBSyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUM7QUFDekIsTUFBTSxRQUFRLEdBQUcsR0FBRyxDQUFDO0FBQ3JCLE1BQU0sT0FBTyxHQUFHLEdBQUcsQ0FBQztBQUNwQixNQUFNLGlCQUFpQixHQUFHLFFBQVEsR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDO0FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNyRyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7QUFDYixJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUM7QUFDcEIsTUFBTSxHQUFHLEdBQUcsV0FBVyxDQUFDLEdBQUcsRUFBRTtJQUMzQixXQUFXLElBQUksaUJBQWlCLENBQUM7SUFDakMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNwRCxXQUFXLEVBQUUsQ0FBQztLQUNmO0lBQ0QsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsRUFBRTtRQUN2QyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUNoQixXQUFXLEVBQUUsQ0FBQztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDckI7QUFDSCxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFFVixTQUFTLFdBQVc7SUFDbEIsSUFBSSxLQUFLLElBQUksSUFBSSxFQUFFO1FBRWpCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0UsSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNiLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQztRQUNqRCxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBQ3hDLDJDQUEyQztRQUMzQyw2QkFBNkI7S0FDOUI7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgdGhpbmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yPEhUTUxEaXZFbGVtZW50PihcIiN0aGluZ1wiKTtcclxuY29uc3QgdGV4dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3I8SFRNTERpdkVsZW1lbnQ+KFwiI3RleHRcIik7XHJcbmNvbnN0IGZwcyA9IDMwO1xyXG5jb25zdCBmcHNNcyA9IDEwMDAgLyBmcHM7XHJcbmNvbnN0IG1heFZhbHVlID0gMTAwO1xyXG5jb25zdCBzZWNvbmRzID0gMzAwO1xyXG5jb25zdCBpbmNyZW1lbnRQZXJGcmFtZSA9IG1heFZhbHVlIC8gZnBzIC8gc2Vjb25kcztcclxuY29uc29sZS5sb2coXCJmcHNcIiwgZnBzLCBcImZwc19tc1wiLCBmcHNNcywgXCJzZWNvbmRzXCIsIHNlY29uZHMsIFwiaW5jcmVtZW50UGVyRnJhbWVcIiwgaW5jcmVtZW50UGVyRnJhbWUpO1xyXG5sZXQgbGFzdCA9IDA7XHJcbmxldCBjdXJyZW50VGltZSA9IDA7XHJcbmNvbnN0IGludCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICBjdXJyZW50VGltZSArPSBpbmNyZW1lbnRQZXJGcmFtZTtcclxuICBpZiAoTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKHNlY29uZHMgLyAxMCkpID09PSAwKSB7XHJcbiAgICBkb0FuaW1hdGlvbigpO1xyXG4gIH1cclxuICBpZiAoTWF0aC5yb3VuZChjdXJyZW50VGltZSkgPj0gbWF4VmFsdWUpIHtcclxuICAgIGNsZWFySW50ZXJ2YWwoaW50KTtcclxuICAgIGxhc3QgPSBtYXhWYWx1ZTtcclxuICAgIGRvQW5pbWF0aW9uKCk7XHJcbiAgICBjb25zb2xlLmxvZyhcImRvbmVcIik7XHJcbiAgfVxyXG59LCBmcHNNcyk7XHJcblxyXG5mdW5jdGlvbiBkb0FuaW1hdGlvbigpIHtcclxuICBpZiAodGhpbmcgJiYgdGV4dCkge1xyXG5cclxuICAgIGNvbnN0IHN0dWZmID0gTWF0aC5taW4oKE1hdGgucmFuZG9tKCkgKiAoY3VycmVudFRpbWUgLSBsYXN0KSkgKyBsYXN0LCAxMDApO1xyXG4gICAgbGFzdCA9IHN0dWZmO1xyXG4gICAgdGhpbmcuc3R5bGUud2lkdGggPSBgJHtNYXRoLnJvdW5kKGxhc3QpICogMTB9cHhgO1xyXG4gICAgdGV4dC5pbm5lclRleHQgPSBgJHtNYXRoLnJvdW5kKGxhc3QpfSVgO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2N1cnJlbnRUaW1lJywgY3VycmVudFRpbWUpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2xhc3QnLCBsYXN0KTtcclxuICB9XHJcbn1cclxuIl19