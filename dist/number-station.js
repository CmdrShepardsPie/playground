"use strict";
let everythingString = '';
let step = 0;
function everything() {
    const synth = window.speechSynthesis;
    const utterThis = new SpeechSynthesisUtterance();
    utterThis.volume = 2;
    // const letters: string = 'QWERTYUIOPASDFGHJKLZXCVBNM';
    function say(text, voice, pitch, rate) {
        console.log('say', text, voice.name, pitch, rate);
        return new Promise((resolve) => {
            utterThis.onend = () => {
                console.log('say end');
                resolve();
            };
            utterThis.onpause = () => {
                console.log('say pause');
                resolve();
            };
            utterThis.onerror = () => {
                console.log('say error');
                resolve();
            };
            utterThis.onboundary = () => {
                console.log('say boundary');
            };
            utterThis.text = text;
            utterThis.voice = voice;
            utterThis.pitch = pitch;
            utterThis.rate = rate;
            synth.speak(utterThis);
        });
    }
    function next(waitFor = Math.random() * 60 * 1000) {
        console.log('next', waitFor);
        setTimeout(async () => {
            const voices = synth.getVoices();
            const voicenum = Math.floor(Math.random() * voices.length);
            const voice = voices[voicenum];
            const pitch = Math.random() + 0.5;
            const rate = Math.random() + 0.5;
            const words = ['activate'];
            const max = 1 + Math.random() * 10;
            for (let i = 0; i <= max; i++) {
                const speakCode = everythingString.charCodeAt(step).toString().split('').join(' ');
                words.push(speakCode);
                step++;
                if (step >= everythingString.length) {
                    step = 0;
                }
            }
            console.log('step', step, '/', everythingString.length - 1);
            if (words.length) {
                await say(words.join(' ... '), voice, pitch, rate);
            }
            next();
        }, waitFor);
    }
    next(1000);
}
everythingString = everything.toString().replace(/[ \r\n]+/g, ' ').replace(/[ \r\n]+/g, ' ');
everything();
// .replace(/-/g, ' negative '));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLXN0YXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbnVtYmVyLXN0YXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksZ0JBQWdCLEdBQVcsRUFBRSxDQUFDO0FBQ2xDLElBQUksSUFBSSxHQUFXLENBQUMsQ0FBQztBQUNyQixTQUFTLFVBQVU7SUFDakIsTUFBTSxLQUFLLEdBQW9CLE1BQU0sQ0FBQyxlQUFlLENBQUM7SUFDdEQsTUFBTSxTQUFTLEdBQTZCLElBQUksd0JBQXdCLEVBQUUsQ0FBQztJQUMzRSxTQUFTLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNyQix3REFBd0Q7SUFFeEQsU0FBUyxHQUFHLENBQUMsSUFBWSxFQUFFLEtBQTJCLEVBQUUsS0FBYSxFQUFFLElBQVk7UUFDakYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2xELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFxRCxFQUFRLEVBQUU7WUFDakYsU0FBUyxDQUFDLEtBQUssR0FBRyxHQUFTLEVBQUU7Z0JBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3ZCLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBQ0YsU0FBUyxDQUFDLE9BQU8sR0FBRyxHQUFTLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBQ0YsU0FBUyxDQUFDLE9BQU8sR0FBRyxHQUFTLEVBQUU7Z0JBQzdCLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQ3pCLE9BQU8sRUFBRSxDQUFDO1lBQ1osQ0FBQyxDQUFDO1lBQ0YsU0FBUyxDQUFDLFVBQVUsR0FBRyxHQUFTLEVBQUU7Z0JBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDOUIsQ0FBQyxDQUFDO1lBQ0YsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDdEIsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDeEIsU0FBUyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7WUFDeEIsU0FBUyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7WUFDdEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUN6QixDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxTQUFTLElBQUksQ0FBQyxVQUFrQixJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUk7UUFDdkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDN0IsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQ3BCLE1BQU0sTUFBTSxHQUEyQixLQUFLLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDekQsTUFBTSxRQUFRLEdBQVcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ25FLE1BQU0sS0FBSyxHQUF5QixNQUFNLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckQsTUFBTSxLQUFLLEdBQVcsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQztZQUMxQyxNQUFNLElBQUksR0FBVyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDO1lBQ3pDLE1BQU0sS0FBSyxHQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckMsTUFBTSxHQUFHLEdBQVcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUM7WUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBVyxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDckMsTUFBTSxTQUFTLEdBQVcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQzNGLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ3RCLElBQUksRUFBRSxDQUFDO2dCQUNQLElBQUksSUFBSSxJQUFJLGdCQUFnQixDQUFDLE1BQU0sRUFBRTtvQkFDbkMsSUFBSSxHQUFHLENBQUMsQ0FBQztpQkFDVjthQUNGO1lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDNUQsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNoQixNQUFNLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDcEQ7WUFDRCxJQUFJLEVBQUUsQ0FBQztRQUNULENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNkLENBQUM7SUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDYixDQUFDO0FBQ0QsZ0JBQWdCLEdBQUcsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM3RixVQUFVLEVBQUUsQ0FBQztBQUNiLGlDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImxldCBldmVyeXRoaW5nU3RyaW5nOiBzdHJpbmcgPSAnJztcbmxldCBzdGVwOiBudW1iZXIgPSAwO1xuZnVuY3Rpb24gZXZlcnl0aGluZygpOiB2b2lkIHtcbiAgY29uc3Qgc3ludGg6IFNwZWVjaFN5bnRoZXNpcyA9IHdpbmRvdy5zcGVlY2hTeW50aGVzaXM7XG4gIGNvbnN0IHV0dGVyVGhpczogU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlID0gbmV3IFNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSgpO1xuICB1dHRlclRoaXMudm9sdW1lID0gMjtcbiAgLy8gY29uc3QgbGV0dGVyczogc3RyaW5nID0gJ1FXRVJUWVVJT1BBU0RGR0hKS0xaWENWQk5NJztcblxuICBmdW5jdGlvbiBzYXkodGV4dDogc3RyaW5nLCB2b2ljZTogU3BlZWNoU3ludGhlc2lzVm9pY2UsIHBpdGNoOiBudW1iZXIsIHJhdGU6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIGNvbnNvbGUubG9nKCdzYXknLCB0ZXh0LCB2b2ljZS5uYW1lLCBwaXRjaCwgcmF0ZSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlOiAodmFsdWU/OiAoUHJvbWlzZUxpa2U8dm9pZD4gfCB2b2lkKSkgPT4gdm9pZCk6IHZvaWQgPT4ge1xuICAgICAgdXR0ZXJUaGlzLm9uZW5kID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2F5IGVuZCcpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9O1xuICAgICAgdXR0ZXJUaGlzLm9ucGF1c2UgPSAoKTogdm9pZCA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKCdzYXkgcGF1c2UnKTtcbiAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgfTtcbiAgICAgIHV0dGVyVGhpcy5vbmVycm9yID0gKCk6IHZvaWQgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZygnc2F5IGVycm9yJyk7XG4gICAgICAgIHJlc29sdmUoKTtcbiAgICAgIH07XG4gICAgICB1dHRlclRoaXMub25ib3VuZGFyeSA9ICgpOiB2b2lkID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coJ3NheSBib3VuZGFyeScpO1xuICAgICAgfTtcbiAgICAgIHV0dGVyVGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgIHV0dGVyVGhpcy52b2ljZSA9IHZvaWNlO1xuICAgICAgdXR0ZXJUaGlzLnBpdGNoID0gcGl0Y2g7XG4gICAgICB1dHRlclRoaXMucmF0ZSA9IHJhdGU7XG4gICAgICBzeW50aC5zcGVhayh1dHRlclRoaXMpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbmV4dCh3YWl0Rm9yOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpICogNjAgKiAxMDAwKTogdm9pZCB7XG4gICAgY29uc29sZS5sb2coJ25leHQnLCB3YWl0Rm9yKTtcbiAgICBzZXRUaW1lb3V0KGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHZvaWNlczogU3BlZWNoU3ludGhlc2lzVm9pY2VbXSA9IHN5bnRoLmdldFZvaWNlcygpO1xuICAgICAgY29uc3Qgdm9pY2VudW06IG51bWJlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHZvaWNlcy5sZW5ndGgpO1xuICAgICAgY29uc3Qgdm9pY2U6IFNwZWVjaFN5bnRoZXNpc1ZvaWNlID0gdm9pY2VzW3ZvaWNlbnVtXTtcbiAgICAgIGNvbnN0IHBpdGNoOiBudW1iZXIgPSBNYXRoLnJhbmRvbSgpICsgMC41O1xuICAgICAgY29uc3QgcmF0ZTogbnVtYmVyID0gTWF0aC5yYW5kb20oKSArIDAuNTtcbiAgICAgIGNvbnN0IHdvcmRzOiBzdHJpbmdbXSA9IFsnYWN0aXZhdGUnXTtcbiAgICAgIGNvbnN0IG1heDogbnVtYmVyID0gMSArIE1hdGgucmFuZG9tKCkgKiAxMDtcbiAgICAgIGZvciAobGV0IGk6IG51bWJlciA9IDA7IGkgPD0gbWF4OyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3BlYWtDb2RlOiBzdHJpbmcgPSBldmVyeXRoaW5nU3RyaW5nLmNoYXJDb2RlQXQoc3RlcCkudG9TdHJpbmcoKS5zcGxpdCgnJykuam9pbignICcpO1xuICAgICAgICB3b3Jkcy5wdXNoKHNwZWFrQ29kZSk7XG4gICAgICAgIHN0ZXArKztcbiAgICAgICAgaWYgKHN0ZXAgPj0gZXZlcnl0aGluZ1N0cmluZy5sZW5ndGgpIHtcbiAgICAgICAgICBzdGVwID0gMDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc29sZS5sb2coJ3N0ZXAnLCBzdGVwLCAnLycsIGV2ZXJ5dGhpbmdTdHJpbmcubGVuZ3RoIC0gMSk7XG4gICAgICBpZiAod29yZHMubGVuZ3RoKSB7XG4gICAgICAgIGF3YWl0IHNheSh3b3Jkcy5qb2luKCcgLi4uICcpLCB2b2ljZSwgcGl0Y2gsIHJhdGUpO1xuICAgICAgfVxuICAgICAgbmV4dCgpO1xuICAgIH0sIHdhaXRGb3IpO1xuICB9XG4gIG5leHQoMTAwMCk7XG59XG5ldmVyeXRoaW5nU3RyaW5nID0gZXZlcnl0aGluZy50b1N0cmluZygpLnJlcGxhY2UoL1sgXFxyXFxuXSsvZywgJyAnKS5yZXBsYWNlKC9bIFxcclxcbl0rL2csICcgJyk7XG5ldmVyeXRoaW5nKCk7XG4vLyAucmVwbGFjZSgvLS9nLCAnIG5lZ2F0aXZlICcpKTtcbiJdfQ==