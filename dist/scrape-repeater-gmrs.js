"use strict";
function getNumber(reg, text) {
    if (text && text.match) {
        var match = text.match(reg);
        return parseFloat(match[match.length - 1], 10);
    }
    return NaN;
}
function getText(reg, text) {
    if (text && text.match) {
        var match = text.match(reg);
        return match[match.length - 1];
    }
}
var allData = [];
var tables = document.querySelectorAll("table.advancedSearchTable");
tables.forEach(function (table, tableIndex) {
    var data = {
        Location: allData.length + 31,
        Name: null,
        Frequency: null,
        Duplex: "",
        Offset: 0,
        Tone: null,
        rToneFreq: 88.5,
        cToneFreq: 88.5,
        DtcsCode: 23,
        DtscRxCode: 23,
        DtcsPolarity: "NN",
        Mode: "FM",
        TStep: 5,
        // Skip: null,
        Comment: null,
    };
    var rows = table.querySelectorAll("tbody > tr");
    rows.forEach(function (row, rowIndex) {
        var cells = row.querySelectorAll("td");
        cells.forEach(function (cell, cellIndex) {
            var subName = /"([^"]*)"/;
            var Frequency = /([-+]?\d+\.?\d*)/;
            // const CC = /CC(\d+)/;
            var DTSC = /(\d+) DPL/;
            var Tone = /(\d+\.?\d*) Hz/;
            var text = cell.innerText;
            if (rowIndex % 2 === 0) {
                switch (cellIndex) {
                    case 0:
                        // Name
                        if ((subName.test(text))) {
                            data.Name = getText(subName, text);
                        }
                        else {
                            data.Name = text;
                        }
                        break;
                    case 1:
                        // Frequency
                        data.Frequency = getNumber(Frequency, text);
                        break;
                    case 2:
                        // Tone
                        if (DTSC.test(text)) {
                            var number = getNumber(DTSC, text);
                            data.DtcsCode = number;
                            data.DtscRxCode = number;
                            data.Tone = "DTCS";
                        }
                        else if (Tone.test(text)) {
                            var number = getNumber(Tone, text);
                            data.rToneFreq = number;
                            data.cToneFreq = number;
                            data.Tone = "Tone";
                        }
                        break;
                }
            }
            else {
                switch (cellIndex) {
                    case 0:
                        // Location
                        data.Comment = text;
                        break;
                    case 1:
                        // Open
                        data.Comment = data.Comment + " " + text;
                        break;
                }
            }
        });
    });
    allData.push(data);
});
// allData.sort((a, b) => a.Frequency - b.Frequency);
// allData.forEach((a, i) => a.Location = i);
JSON.stringify(allData);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyYXBlLXJlcGVhdGVyLWdtcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvc2NyYXBlLXJlcGVhdGVyLWdtcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVMsU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJO0lBQzFCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDdEIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUNoRDtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2IsQ0FBQztBQUNELFNBQVMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJO0lBQ3hCLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDdEIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM5QixPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ2hDO0FBQ0gsQ0FBQztBQUNELElBQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQztBQUNuQixJQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsMkJBQTJCLENBQUMsQ0FBQztBQUN0RSxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQUMsS0FBSyxFQUFFLFVBQVU7SUFDL0IsSUFBTSxJQUFJLEdBQUc7UUFDWCxRQUFRLEVBQUUsT0FBTyxDQUFDLE1BQU0sR0FBRyxFQUFFO1FBQzdCLElBQUksRUFBRSxJQUFJO1FBQ1YsU0FBUyxFQUFFLElBQUk7UUFDZixNQUFNLEVBQUUsRUFBRTtRQUNWLE1BQU0sRUFBRSxDQUFDO1FBQ1QsSUFBSSxFQUFFLElBQUk7UUFDVixTQUFTLEVBQUUsSUFB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cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0TnVtYmVyKHJlZywgdGV4dCkge1xuICBpZiAodGV4dCAmJiB0ZXh0Lm1hdGNoKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB0ZXh0Lm1hdGNoKHJlZyk7XG4gICAgcmV0dXJuIHBhcnNlRmxvYXQobWF0Y2hbbWF0Y2gubGVuZ3RoIC0gMV0sIDEwKTtcbiAgfVxuICByZXR1cm4gTmFOO1xufVxuZnVuY3Rpb24gZ2V0VGV4dChyZWcsIHRleHQpIHtcbiAgaWYgKHRleHQgJiYgdGV4dC5tYXRjaCkge1xuICAgIGNvbnN0IG1hdGNoID0gdGV4dC5tYXRjaChyZWcpO1xuICAgIHJldHVybiBtYXRjaFttYXRjaC5sZW5ndGggLSAxXTtcbiAgfVxufVxuY29uc3QgYWxsRGF0YSA9IFtdO1xuY29uc3QgdGFibGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcInRhYmxlLmFkdmFuY2VkU2VhcmNoVGFibGVcIik7XG50YWJsZXMuZm9yRWFjaCgodGFibGUsIHRhYmxlSW5kZXgpID0+IHtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICBMb2NhdGlvbjogYWxsRGF0YS5sZW5ndGggKyAzMSxcbiAgICBOYW1lOiBudWxsLFxuICAgIEZyZXF1ZW5jeTogbnVsbCxcbiAgICBEdXBsZXg6IFwiXCIsXG4gICAgT2Zmc2V0OiAwLFxuICAgIFRvbmU6IG51bGwsXG4gICAgclRvbmVGcmVxOiA4OC41LFxuICAgIGNUb25lRnJlcTogODguNSxcbiAgICBEdGNzQ29kZTogMjMsXG4gICAgRHRzY1J4Q29kZTogMjMsXG4gICAgRHRjc1BvbGFyaXR5OiBcIk5OXCIsXG4gICAgTW9kZTogXCJGTVwiLFxuICAgIFRTdGVwOiA1LFxuICAgIC8vIFNraXA6IG51bGwsXG4gICAgQ29tbWVudDogbnVsbCxcbiAgICAvLyBVUkNBTEw6IG51bGwsXG4gICAgLy8gUlBUMUNBTEw6IG51bGwsXG4gICAgLy8gUlBUMkNBTEw6IG51bGwsXG4gICAgLy8gRFZDT0RFOiBudWxsXG4gIH07XG4gIGNvbnN0IHJvd3MgPSB0YWJsZS5xdWVyeVNlbGVjdG9yQWxsKFwidGJvZHkgPiB0clwiKTtcbiAgcm93cy5mb3JFYWNoKChyb3csIHJvd0luZGV4KSA9PiB7XG5cbiAgICBjb25zdCBjZWxscyA9IHJvdy5xdWVyeVNlbGVjdG9yQWxsKFwidGRcIik7XG4gICAgY2VsbHMuZm9yRWFjaCgoY2VsbCwgY2VsbEluZGV4KSA9PiB7XG4gICAgICBjb25zdCBzdWJOYW1lID0gL1wiKFteXCJdKilcIi87XG4gICAgICBjb25zdCBGcmVxdWVuY3kgPSAvKFstK10/XFxkK1xcLj9cXGQqKS87XG4gICAgICAvLyBjb25zdCBDQyA9IC9DQyhcXGQrKS87XG4gICAgICBjb25zdCBEVFNDID0gLyhcXGQrKSBEUEwvO1xuICAgICAgY29uc3QgVG9uZSA9IC8oXFxkK1xcLj9cXGQqKSBIei87XG4gICAgICBjb25zdCB0ZXh0ID0gY2VsbC5pbm5lclRleHQ7XG4gICAgICBpZiAocm93SW5kZXggJSAyID09PSAwKSB7XG4gICAgICBzd2l0Y2ggKGNlbGxJbmRleCkge1xuICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgLy8gTmFtZVxuICAgICAgICAgIGlmICgoc3ViTmFtZS50ZXN0KHRleHQpKSkge1xuICAgICAgICAgICAgZGF0YS5OYW1lID0gZ2V0VGV4dChzdWJOYW1lLCB0ZXh0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGF0YS5OYW1lID0gdGV4dDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAvLyBGcmVxdWVuY3lcbiAgICAgICAgICBkYXRhLkZyZXF1ZW5jeSA9IGdldE51bWJlcihGcmVxdWVuY3ksIHRleHQpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgLy8gVG9uZVxuICAgICAgICAgIGlmIChEVFNDLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bWJlciA9IGdldE51bWJlcihEVFNDLCB0ZXh0KTtcbiAgICAgICAgICAgIGRhdGEuRHRjc0NvZGUgPSBudW1iZXI7XG4gICAgICAgICAgICBkYXRhLkR0c2NSeENvZGUgPSBudW1iZXI7XG4gICAgICAgICAgICBkYXRhLlRvbmUgPSBcIkRUQ1NcIjtcbiAgICAgICAgICB9IGVsc2UgaWYgKFRvbmUudGVzdCh0ZXh0KSkge1xuICAgICAgICAgICAgY29uc3QgbnVtYmVyID0gZ2V0TnVtYmVyKFRvbmUsIHRleHQpO1xuICAgICAgICAgICAgZGF0YS5yVG9uZUZyZXEgPSBudW1iZXI7XG4gICAgICAgICAgICBkYXRhLmNUb25lRnJlcSA9IG51bWJlcjtcbiAgICAgICAgICAgIGRhdGEuVG9uZSA9IFwiVG9uZVwiO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN3aXRjaCAoY2VsbEluZGV4KSB7XG4gICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgLy8gTG9jYXRpb25cbiAgICAgICAgICAgIGRhdGEuQ29tbWVudCA9IHRleHQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAvLyBPcGVuXG4gICAgICAgICAgICBkYXRhLkNvbW1lbnQgPSBgJHtkYXRhLkNvbW1lbnR9ICR7dGV4dH1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIGFsbERhdGEucHVzaChkYXRhKTtcbn0pO1xuLy8gYWxsRGF0YS5zb3J0KChhLCBiKSA9PiBhLkZyZXF1ZW5jeSAtIGIuRnJlcXVlbmN5KTtcbi8vIGFsbERhdGEuZm9yRWFjaCgoYSwgaSkgPT4gYS5Mb2NhdGlvbiA9IGkpO1xuSlNPTi5zdHJpbmdpZnkoYWxsRGF0YSk7XG4iXX0=