"use strict";
console.log();
const morse = require("./morse.json");
function getValue(code) {
    const parts = code.split("");
    let value = (parts.length - 1) * 1;
    parts.forEach((p) => {
        if (p === ".") {
            value += 1;
        }
        else if (p === "-") {
            value += 3;
        }
        else {
            console.log("Wrong Symbol");
        }
    });
    return value;
}
const m = morse.map((o) => ({ Letter: o.Letter, Code: o.Code, Value: getValue(o.Code) }));
m.sort((a, b) => a.Value - b.Value);
m.forEach((t, i) => {
    if (i > 0 && m[i - 1].Value !== t.Value) {
        console.log();
    }
    console.log(t.Letter, t.Value, t.Code);
});
console.log();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9yc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9yc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUVkLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV0QyxTQUFTLFFBQVEsQ0FBQyxJQUFJO0lBQ3BCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUU7UUFDbEIsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ2IsS0FBSyxJQUFJLENBQUMsQ0FBQztTQUNaO2FBQU0sSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFO1lBQ3BCLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDWjthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztTQUM3QjtJQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0gsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDO0FBRUQsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFDLENBQUMsQ0FBQyxDQUFDO0FBRXhGLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUVwQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQ2pCLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ3ZDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztLQUNmO0lBQ0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBRUgsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY29uc29sZS5sb2coKTtcblxuY29uc3QgbW9yc2UgPSByZXF1aXJlKFwiLi9tb3JzZS5qc29uXCIpO1xuXG5mdW5jdGlvbiBnZXRWYWx1ZShjb2RlKSB7XG4gIGNvbnN0IHBhcnRzID0gY29kZS5zcGxpdChcIlwiKTtcbiAgbGV0IHZhbHVlID0gKHBhcnRzLmxlbmd0aCAtIDEpICogMTtcbiAgcGFydHMuZm9yRWFjaCgocCkgPT4ge1xuICAgIGlmIChwID09PSBcIi5cIikge1xuICAgICAgdmFsdWUgKz0gMTtcbiAgICB9IGVsc2UgaWYgKHAgPT09IFwiLVwiKSB7XG4gICAgICB2YWx1ZSArPSAzO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmxvZyhcIldyb25nIFN5bWJvbFwiKTtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmNvbnN0IG0gPSBtb3JzZS5tYXAoKG8pID0+ICh7TGV0dGVyOiBvLkxldHRlciwgQ29kZTogby5Db2RlLCBWYWx1ZTogZ2V0VmFsdWUoby5Db2RlKX0pKTtcblxubS5zb3J0KChhLCBiKSA9PiBhLlZhbHVlIC0gYi5WYWx1ZSk7XG5cbm0uZm9yRWFjaCgodCwgaSkgPT4ge1xuICBpZiAoaSA+IDAgJiYgbVtpIC0gMV0uVmFsdWUgIT09IHQuVmFsdWUpIHtcbiAgICBjb25zb2xlLmxvZygpO1xuICB9XG4gIGNvbnNvbGUubG9nKHQuTGV0dGVyLCB0LlZhbHVlLCB0LkNvZGUpO1xufSk7XG5cbmNvbnNvbGUubG9nKCk7XG4iXX0=