"use strict";
console.log();
var morse = require("./morse.json");
function getValue(code) {
    var parts = code.split("");
    var value = (parts.length - 1) * 1;
    parts.forEach(function (p) {
        if (p === ".") {
            value += 1;
        }
        else if (p === "-") {
            value += 3;
        }
        else {
            console.log("Wrong Symbol");
        }
    });
    return value;
}
var m = morse.map(function (o) { return ({ Letter: o.Letter, Code: o.Code, Value: getValue(o.Code) }); });
m.sort(function (a, b) { return a.Value - b.Value; });
m.forEach(function (t, i) {
    if (i > 0 && m[i - 1].Value !== t.Value) {
        console.log();
    }
    console.log(t.Letter, t.Value, t.Code);
});
console.log();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9yc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvbW9yc2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUVkLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUV0QyxTQUFTLFFBQVEsQ0FBQyxJQUFJO0lBQ3BCLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDN0IsSUFBSSxLQUFLLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQztRQUNkLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNiLEtBQUssSUFBSSxDQUFDLENBQUM7U0FDWjthQUFNLElBQUksQ0FBQyxLQUFLLEdBQUcsRUFBRTtZQUNwQixLQUFLLElBQUksQ0FBQyxDQUFDO1NBQ1o7YUFBTTtZQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDLENBQUMsQ0FBQztJQUNILE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQztBQUNELElBQU0sQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBQyxDQUFDLElBQUssT0FBQSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUE3RCxDQUE2RCxDQUFDLENBQUM7QUFFMUYsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFDLENBQUMsRUFBRSxDQUFDLElBQUssT0FBQSxDQUFDLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxLQUFLLEVBQWpCLENBQWlCLENBQUMsQ0FBQztBQUVwQyxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsQ0FBQyxFQUFFLENBQUM7SUFDYixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLEtBQUssRUFBRTtRQUN2QyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7S0FDZjtJQUNELE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QyxDQUFDLENBQUMsQ0FBQztBQUVILE9BQU8sQ0FBQyxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnNvbGUubG9nKCk7XG5cbmNvbnN0IG1vcnNlID0gcmVxdWlyZShcIi4vbW9yc2UuanNvblwiKTtcblxuZnVuY3Rpb24gZ2V0VmFsdWUoY29kZSkge1xuICBjb25zdCBwYXJ0cyA9IGNvZGUuc3BsaXQoXCJcIik7XG4gIGxldCB2YWx1ZSA9IChwYXJ0cy5sZW5ndGggLSAxKSAqIDE7XG4gIHBhcnRzLmZvckVhY2goKHApID0+IHtcbiAgICBpZiAocCA9PT0gXCIuXCIpIHtcbiAgICAgIHZhbHVlICs9IDE7XG4gICAgfSBlbHNlIGlmIChwID09PSBcIi1cIikge1xuICAgICAgdmFsdWUgKz0gMztcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coXCJXcm9uZyBTeW1ib2xcIik7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuY29uc3QgbSA9IG1vcnNlLm1hcCgobykgPT4gKHsgTGV0dGVyOiBvLkxldHRlciwgQ29kZTogby5Db2RlLCBWYWx1ZTogZ2V0VmFsdWUoby5Db2RlKSB9KSk7XG5cbm0uc29ydCgoYSwgYikgPT4gYS5WYWx1ZSAtIGIuVmFsdWUpO1xuXG5tLmZvckVhY2goKHQsIGkpID0+IHtcbiAgaWYgKGkgPiAwICYmIG1baSAtIDFdLlZhbHVlICE9PSB0LlZhbHVlKSB7XG4gICAgY29uc29sZS5sb2coKTtcbiAgfVxuICBjb25zb2xlLmxvZyh0LkxldHRlciwgdC5WYWx1ZSwgdC5Db2RlKTtcbn0pO1xuXG5jb25zb2xlLmxvZygpO1xuIl19